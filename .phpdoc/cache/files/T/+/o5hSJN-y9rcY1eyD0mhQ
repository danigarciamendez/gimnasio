1639532519
AwuilbDvXz%3Afbe7fcf4c0c591ca2703199f9af45c11-2024ca35f5fc841a5a1075558eeddd15
s:27924:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"2024ca35f5fc841a5a1075558eeddd15";s:39:" phpDocumentor\Reflection\Php\File name";s:19:"MisReservasView.php";s:39:" phpDocumentor\Reflection\Php\File path";s:26:"vistas/MisReservasView.php";s:41:" phpDocumentor\Reflection\Php\File source";s:20140:"<!doctype html>
<html lang="en">
  <head>
  <?php require_once 'includes/head.php'; ?>
  <link rel="stylesheet" type="text/css" href="css/estilos.css">
</head>
  <body>
      
    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  
    <!--Main Navigation-->
    <header>

        <!--Navbar-->
        <nav class="navbar navbar-expand-lg navbar-dark fixed-top scrolling-navbar">

            <div class="container">

                <!-- Navbar brand -->
                <a class="navbar-brand" href="?controller=home&accion=index">Inicio</a>

                <!-- Collapse button -->
                

                <!-- Collapsible content -->
                <div class="collapse navbar-collapse" id="basicExampleNav">

                    <!-- Links -->
                    <ul class="navbar-nav mr-auto smooth-scroll">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" id="navbarDropdownMenuLink" data-toggle="dropdown"
                                aria-haspopup="true" aria-expanded="false">Reservas</a>
                                <div class="dropdown-menu dropdown-primary" aria-labelledby="navbarDropdownMenuLink">
                                <a class="dropdown-item" href="?controller=reservas&accion=reservas">Reservar actividad</a>
                                <a class="dropdown-item" href="?controller=reservas&accion=misReservas">Ver reservas</a>
                                
                              </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="?controller=home&accion=perfil">Perfil</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="?controller=home&accion=contacto">Contacto</a>
                        </li>
                        <?php
                        if($_SESSION["rol"] == "admin"){
                            ?>
                            <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" id="navbarDropdownMenuLink" data-toggle="dropdown"
                                aria-haspopup="true" aria-expanded="false">Administración</a>
                                <div class="dropdown-menu dropdown-primary" aria-labelledby="navbarDropdownMenuLink">
                                <a class="dropdown-item" href="?controller=admin&accion=modificarUsuario">Usuarios</a>
                                <a class="dropdown-item" href="?controller=admin&accion=modificarActividad">Actividades</a>
                                <a class="dropdown-item" href="?controller=admin&accion=modificarHorario">Horario</a>
                              </div>
                            </li>
                            <?php
                        }
                        ?>
                        
                    </ul>
                    <!-- Links -->

                    <!-- Social Icon  -->
                    <p class="bienvenido">
                        Bienvenido  <?php echo $_SESSION["rol"]. " ". $_SESSION["usuario"];?> 
                    </p>
                    <!-- Zona de mensajes y cerrar sesión -->
                    <a href="?controller=home&accion=bandejaMensajes" class="enlaceMensajes"><i class="fas fa-inbox"></i> <?php echo $_SESSION["nMen"]." ";?></a>
                    <a href="?controller=home&accion=cerrarSesion" class="enlaceCerrarSesion"><i class="fas fa-sign-out-alt"></i> Cerrar sesión</a>
                </div>
                <!-- Collapsible content -->

            </div>

        </nav>
        <!--/.Navbar-->
        <!--Mask-->
        <div id="intro" class="view">

            <div class="mask rgba-black-strong">

                <div class="container-fluid d-flex align-items-center justify-content-center h-100">

                    <div class="row d-flex justify-content-center text-center">

                        <div class="col-md-10">

                            <!-- Heading -->
                            <h2 class="display-4 font-weight-bold white-text pt-5 mb-2">Gimnasio Guitart</h2>

                            <!-- Divider -->
                            <hr class="hr-light">

                            <!-- Description -->
                            <h4 class="white-text my-4">Mira nuestro nuevo horario por motivos de la pandemia.</h4>
                            <button type="button" class="btn btn-outline-white">Ver <i class="fa fa-book ml-2"></i></button>

                        </div>

                    </div>

                </div>

            </div>
        </div>
    <!--/.Mask-->
        
    </header>
    <!--Main Navigation-->

    <!--Main layout-->
    <main class="mt-5">
        <div class="container">

            <!-- Heading -->
                <div class="row">
                    
                    <div class="col">
                    </div>
                    <div class="col">
                        <h2 class="mb-5 font-weight-bold">Mis reservas</h2>
                    </div>
                    <div class="col">
                    </div>
                    
                </div>

                <!-- Opciones de filtrado -->
                <form action="?controller=reservas&accion=buscarTramoUsuario&regsxpag=<?php if(isset($regsxpag)) {echo $regsxpag ;} ?>" method="POST">
                
                <div class="row">
                    <div class="col-1">
                    </div>
                    <div class="col-3">
                    
                        <div class="form-group">
                        <label for="">Buscar por : </label>
                        <select class="browser-default " name="columnaBuscar" >
                            <option  selected disabled>Elige</option>
                            <option value="actividad">Actividad</option>
                            <option value="fecha_actividad">Fecha</option>
                        </select>
                        </div>
                    
                    </div>
                    <div class="col-2">
                        <input type="text" name="datoBuscar">
                    </div>
                    <div class="col-1">
                        <input type="submit" name="submit" value="Buscar" class="">
                    </div>
                    </form>
                    <div class="col-1">
                            <a class="nav-link dropdown-toggle separar" id="navbarDropdownMenuLink" data-toggle="dropdown"
                                aria-haspopup="true" aria-expanded="false">Listar por</a>
                            <div class="dropdown-menu dropdown-primary" aria-labelledby="navbarDropdownMenuLink">
                                <a class="dropdown-item" href="?controller=reservas&accion=listarHistoricos">Historico</a>
                                <a class="dropdown-item" href="?controller=admin&accion=listarFuturos">Futuros</a>
                            </div>
                    </div>
                    <div class="col-1">
                    </div>
                    <div class="col-1">
                    <a class="nav-link dropdown-toggle" id="navbarDropdownMenuLink" data-toggle="dropdown"
                                aria-haspopup="true" aria-expanded="false">Nº Registros:</a>
                            <div class="dropdown-menu dropdown-primary" aria-labelledby="navbarDropdownMenuLink">
                            
                            <a class="dropdown-item" href="?controller=reservas&accion=misReservas&regsxpag=2"> <i class="icon-fixed-width icon-th"></i> 2</a>
                            <a class="dropdown-item" href="?controller=reservas&accion=misReservas&regsxpag=4"> <i class="icon-fixed-width icon-th"> </i> 4</a>
                            <a class="dropdown-item" href="?controller=reservas&accion=misReservas&regsxpag=8"> <i class="icon-fixed-width icon-th"></i> 8</a>
                            <a class="dropdown-item" href="?controller=reservas&accion=misReservas&regsxpag=10"><i class="icon-fixed-width icon-th"></i> 10</a>
                            
                            </div>

                        
                    </div>
                    
                </div>
                
                

                <!--Grid row-->
                <div class="row d-flex justify-content-center mb-4">

                    <!--Grid column-->
                    <div class="col-md-10">
                        <div class="row">
                            <div class="col">
                            <?php
                            if(isset($mensajes)){

                            
                             foreach ($mensajes as $mensaje) : ?> 
                                <div class="alert alert-<?= $mensaje["tipo"] ?>"><?= $mensaje["mensaje"] ?></div>
                            <?php endforeach;} ?>
                            <table class="table table-striped">
                                <tr>
                                <th scope="col">Horario</th>
                                
                                <th scope="col">Actividad</th>
                                <th scope="col">Dia</th>
                                <th scope="col">Fecha actividad</th>
                                <th scope="col">Fecha_reserva</th>
                                <th scope="col">Eliminar</th>
                                
                                </tr>
                                <!--Los datos a listar están almacenados en $parametros["datos"], que lo recibimos del controlador-->
                                <?php foreach ($datos as $d) : ?>
                                <!--Mostramos cada registro en una fila de la tabla-->
                                <tr>  
                                <th scope="col"><?= $d["hora_inicio"]." - ".$d["hora_fin"]; ?></th>
                                    <td><?= $d["nombre"] ?></td>
                                    <td><?= $d["dia"] ?></td>
                                    <td><?= $d["fecha_actividad"] ?></td>
                                    <td><?= $d["fecha_reserva"] ?></td>
                                    
                                    <!-- Enviamos a actuser.php, mediante GET, el id del registro que deseamos editar o eliminar: -->
                                    <td> 
                                        <a href="?controller=reservas&accion=del_tramo_usuario&id=<?= $d['id'] ?>"><i class="fas fa-minus-square"></i></i> </a>
                                    </td>
                                </tr>
                                <?php endforeach; ?>
                            </table>

                            <?php //Sólo mostramos los enlaces a páginas si existen registros a mostrar
                            if($totalregistros>=1):  
                            ?>
                            <nav aria-label="Page navigation example" class="text-center">
                            <ul class="pagination">
                            
                                <?php 
                                //Comprobamos si estamos en la primera página. Si es así, deshabilitamos el botón 'anterior'
                                if($pagina==1): ?>
                                    <li class="page-item disabled"><a class="page-link" href="#">&laquo;</a></li>
                                <?php else: ?>
                                    <li class="page-item"><a class="page-link" href="index.php?pagina=<?php echo $pagina-1; ?>&regsxpag=<?= $regsxpag ?>"> &laquo;</a></li>
                                <?php  
                                endif;
                                //Mostramos como activos el botón de la página actual
                                for($i=1;$i<=$numpaginas;$i++){
                                    if($pagina==$i){
                                    echo '<li class="page-item active"> 
                                        <a class="page-link" href="?controller=reservas&accion=misReservas&pagina=' . $i . '&regsxpag=' . $regsxpag . '">'. $i .'</a></li>';
                                    }else {
                                    echo '<li class="page-item"> 
                                        <a class="page-link" href="?controller=reservas&accion=misReservas&pagina=' . $i . '&regsxpag=' . $regsxpag . '">'. $i .'</a></li>';
                                    }
                                }
                                //Comprobamos si estamos en la última página. Si es así, deshabilitamos el botón 'siguiente'
                                if($pagina==$numpaginas): ?>  
                                    <li class="page-item disabled"><a class="page-link" href="#">&raquo;</a></li>
                                <?php else: ?>
                                    <li class="page-item"><a class="page-link" href="?controller=reservas&accion=misReservas&pagina=<?php echo $pagina+1; ?>&regsxpag=<?= $regsxpag ?>"> &raquo; </a></li>
                                <?php endif; ?>    
                            </ul>         
                            </nav>
                            <?php endif;  //if($totalregistros>=1): ?>

                            </div>
                        </div>
                        <br>
                               
                </div>
            
        </div>
    </main>
    <!--Main layout-->

    <!-- Footer -->
    <footer class="page-footer font-small unique-color-dark">

        <!-- Social buttons -->
        <div class="primary-color">
            <div class="container">
                <!--Grid row-->
                <div class="row py-4 d-flex align-items-center">

                    <!--Grid column-->
                    <div class="col-md-6 col-lg-5 text-center text-md-left mb-4 mb-md-0">
                        <h6 class="mb-0 white-text">Get connected with us on social networks!</h6>
                    </div>
                    <!--Grid column-->

                    <!--Grid column-->
                    <div class="col-md-6 col-lg-7 text-center text-md-right">
                        <!--Facebook-->
                        <a class="fb-ic ml-0">
                            <i class="fab fa-facebook white-text mr-4"> </i>
                        </a>
                        <!--Twitter-->
                        <a class="tw-ic">
                            <i class="fab fa-twitter white-text mr-4"> </i>
                        </a>
                        <!--Google +-->
                        <a class="gplus-ic">
                            <i class="fab fa-google-plus white-text mr-4"> </i>
                        </a>
                        <!--Linkedin-->
                        <a class="li-ic">
                            <i class="fab fa-linkedin white-text mr-4"> </i>
                        </a>
                        <!--Instagram-->
                        <a class="ins-ic">
                            <i class="fab fa-instagram white-text mr-lg-4"> </i>
                        </a>
                    </div>
                    <!--Grid column-->

                </div>
                <!--Grid row-->
            </div>
        </div>
        <!-- Social buttons -->

        <!--Footer Links-->
        <div class="container mt-5 mb-4 text-center text-md-left">
            <div class="row mt-3">

                <!--First column-->
                <div class="col-md-3 col-lg-4 col-xl-3 mb-4">
                    <h6 class="text-uppercase font-weight-bold">
                        <strong>Company name</strong>
                    </h6>
                    <hr class="deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto" style="width: 60px;">
                    <p>Here you can use rows and columns here to organize your footer content. Lorem ipsum dolor sit
                        amet, consectetur adipisicing elit.</p>
                </div>
                <!--/.First column-->

                <!--Second column-->
                <div class="col-md-2 col-lg-2 col-xl-2 mx-auto mb-4">
                    <h6 class="text-uppercase font-weight-bold">
                        <strong>Products</strong>
                    </h6>
                    <hr class="deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto" style="width: 60px;">
                    <p>
                        <a href="#!">MDBootstrap</a>
                    </p>
                    <p>
                        <a href="#!">MDWordPress</a>
                    </p>
                    <p>
                        <a href="#!">BrandFlow</a>
                    </p>
                    <p>
                        <a href="#!">Bootstrap Angular</a>
                    </p>
                </div>
                <!--/.Second column-->

                <!--Third column-->
                <div class="col-md-3 col-lg-2 col-xl-2 mx-auto mb-4">
                    <h6 class="text-uppercase font-weight-bold">
                        <strong>Useful links</strong>
                    </h6>
                    <hr class="deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto" style="width: 60px;">
                    <p>
                        <a href="#!">Your Account</a>
                    </p>
                    <p>
                        <a href="#!">Become an Affiliate</a>
                    </p>
                    <p>
                        <a href="#!">Shipping Rates</a>
                    </p>
                    <p>
                        <a href="#!">Help</a>
                    </p>
                </div>
                <!--/.Third column-->

                <!--Fourth column-->
                <div class="col-md-4 col-lg-3 col-xl-3">
                    <h6 class="text-uppercase font-weight-bold">
                        <strong>Contact</strong>
                    </h6>
                    <hr class="deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto" style="width: 60px;">
                    <p>
                        <i class="fas fa-home"></i></i> New York, NY 10012, US</p>
                    <p>
                        <i class="fa fa-envelope mr-3"></i> info@example.com</p>
                    <p>
                        <i class="fa fa-phone mr-3"></i> + 01 234 567 88</p>
                    <p>
                        <i class="fa fa-print mr-3"></i> + 01 234 567 89</p>
                </div>
                <!--/.Fourth column-->

            </div>
        </div>
        <!--/.Footer Links-->

        <!-- Copyright -->
        <div class="footer-copyright text-center py-3">© 2018 Copyright:
            <a href="https://mdbootstrap.com/bootstrap-tutorial/"> MDBootstrap.com</a>
        </div>
        <!-- Copyright -->

    </footer>
    <!-- Footer -->

    <script src="../assets/js/js.js"></script>

</body>
</html>

";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";